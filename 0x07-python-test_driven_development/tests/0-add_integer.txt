Module: calculator
Function: add_integer(a, b=98)
Importing the function from the module:
	>>> add_integer = __import__("0-add_integer").add_integer

Checking for module docstring:
	 >>> m = __import__("0-add_integer").__doc__
	 >>> len(m) > 1
	 True

Checking for function docstring:
	 >>> f = __import__("0-add_integer").add_integer.__doc__
         >>> len(f) > 1
         True



add_integer(2, 3) # returns 5
add_integer(2.5, 3.5) # returns 5
add_integer(2, '3') # raises TypeError: b must be an integer
add_integer([2], 3) # raises TypeError: a must be an integer

def test_add_integer():
    assert add_integer(2, 3) == 5
    assert add_integer(0, 0) == 0
    assert add_integer(-3, 5) == 2
    assert add_integer(2.5, 3.5) == 5
    assert add_integer(-2.5, 3.5) == 1
    assert add_integer(2, -3.5) == -1
    assert add_integer(2.5, -3.5) == -1
    assert add_integer() == 98
    try:
        add_integer(2, '3')
    except TypeError as e:
        assert str(e) == "b must be an integer"
    try:
        add_integer([2], 3)
    except TypeError as e:
        assert str(e) == "a must be an integer"
These tests cover a range of cases, including:

Adding positive integers
Adding zero
Adding negative integers
Adding floats
Adding a combination of integers and floats
Adding the default value of 98
Attempting to add an integer with a non-integer type (which should raise a TypeError)
Attempting to add a non-integer with an integer (which should raise a TypeError)
These tests should ensure that the add_integer function is working correctly for a variety of input cases.
